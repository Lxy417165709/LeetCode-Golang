package main

/*
	你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。
	拿掉最后一块石头的人就是获胜者。你作为先手。
	你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。
*/
func canWinNim(n int) bool {
	return n%(3+1) != 0 // 这里的"3"表示一次最多拿3块。
}
/*
	题目链接:
		https://leetcode-cn.com/problems/nim-game/		Nim游戏
*/

/*
	总结
	1. 为什么这道题解法这么简单呢？
			思路:
				我们列举一些情况:
				石头堆只有 0 块石头:	我无法拿石头，我输了，返回false。	(这个态是必败态)
				石头堆只有 1 块石头:	我先手拿走 1 块，我赢了，返回true。	(这个态是必胜态)
				石头堆只有 2 块石头:	我先手拿走 2 块，我赢了，返回true。	(这个态是必胜态)
				石头堆只有 3 块石头:	我先手拿走 3 块，我赢了，返回true。	(这个态是必胜态)
				石头堆只有 4 块石头:	我先手拿走 [1, 3] 块，无论怎么样，石头堆剩余石头都 <= 3，
										即，我先手拿走 [1, 3] 块后，对手再全部拿走就赢了。
																			(这个态是必败态)
				石头堆只有 5 块石头:	我先手拿走 1 块，然后石头堆就剩下 4 块，所以对手必败，
										我必胜，返回true。					(这个态是必胜态)
				石头堆只有 6 块石头:	我先手拿走 2 块，然后石头堆就剩下 4 块，所以对手必败，
										我必胜，返回true。					(这个态是必胜态)
				石头堆只有 7 块石头:	我先手拿走 3 块，然后石头堆就剩下 4 块，所以对手必败，
										我必胜，返回true。					(这个态是必胜态)
				石头堆只有 8 块石头:	我先手拿走 [1, 3] 块，无论怎么样，石头堆剩余石头都位于[5, 7]区间，
										即，我先手拿走 [1, 3] 块后，对手是必胜的。
																			(这个态是必败态)
				石头堆只有 9 块石头:	我先手拿走 1 块，石头堆剩下8块，则对手面临着必败态，
										所以我必胜，返回true。				(这个态是必胜态)

			所以可以总结出来:
				当我接下来的操作都无法使状态转移为必败态时，那么我是必败的；	(因为对手面临的都是必胜态)
				当我接下来的操作可以将状态转移为必败态时，我是必胜的。			(因为对手此时可以面临必败态)

			回到题目，当石头堆为 (每次最多取的石头数 + 1) 的倍数时，那么我是必败的，否则我必胜。

*/